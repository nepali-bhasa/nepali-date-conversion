package patro;

public class Bs implements Dictionary {

    private static int[][] data = {
        {30,32,31,32,31,30,30,30,29,30,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {30,32,31,32,31,30,30,30,29,30,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,29,30,30,29,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,29,30,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,29,30,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,30,29,31,366},
        {31,31,31,32,31,31,30,29,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,30,29,31,366},
        {31,31,31,32,31,31,30,29,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {30,32,31,32,31,30,30,30,29,30,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,31,32,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {30,32,31,32,31,30,30,30,29,30,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {30,32,31,32,31,31,29,30,30,29,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,29,30,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,29,30,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,30,29,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,30,29,31,366},
        {31,31,31,32,31,31,30,29,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,30,29,31,366},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,31,32,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {30,32,31,32,31,30,30,30,29,30,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {30,32,31,32,31,31,29,30,29,30,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,29,30,30,29,29,31,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,31,32,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,29,30,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,31,366},
        {31,31,31,32,31,31,30,29,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,30,29,31,366},
        {31,31,31,32,31,31,30,29,30,29,30,30,365},
        {31,31,32,31,31,31,30,29,30,29,30,30,365},
        {31,32,31,32,31,30,30,30,29,29,30,30,365},
        {31,31,32,32,31,30,30,30,29,30,30,30,366},
        {30,32,31,32,31,30,30,30,29,30,30,30,365},
        {31,31,32,31,31,30,30,30,29,30,30,30,365},
        {31,31,32,31,31,30,30,30,29,30,30,30,365},
        {31,32,31,32,30,31,30,30,29,30,30,30,366},
        {30,32,31,32,31,30,30,30,29,30,30,30,365},
        {31,31,32,31,31,31,30,30,29,30,30,30,366},
        {30,31,32,32,30,31,30,30,29,30,30,30,365},
        {30,32,31,32,31,30,30,30,29,30,30,30,365},
        {30,32,31,32,31,30,30,30,29,30,30,30,365}
    };

    private static Ymd min = new Ymd(2000, 9, 17);
    private static Ymd max = new Ymd(2090, 12, 30);

    public int get(int y) throws OutOfBoundError {
        return get(y, 13);
    }

    public int get(int y, int m) throws OutOfBoundError {
        assertMonth(m);
        assertYear(y);
        return data[y-min.year()][m-1];
    }

    public Ymd max() {
        return max;
    }

    public Ymd min() {
        return min;
    }

    private static void assertMonth(int m) throws OutOfBoundError {
        if (m > 12+1 || m <= 0)
            throw new OutOfBoundError();
    }

    private static void assertYear(int y) throws OutOfBoundError {
        if (y > max.year() || y < min.year())
            throw new OutOfBoundError();
    }

}
